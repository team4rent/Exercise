@{
    ViewBag.Title = "Index";
    Layout = "~/Views/_Layout.cshtml";
}

<div>
    <h2>Technical test</h2>
    @Html.ActionLink("Exercise 1 - Run up the stairs", "Exercise1")
    <div>
        You are climbing a staircase. The staircase consists of some number of flights of stairs separated by landings. A flight is a continuous series of steps from one landing to another. You are a reasonably tall athletic person, so you can climb a certain number of steps in one stride. However, after each flight, there is a landing which you cannot skip because you need to turn around for the next flight (which continues in a different direction).<br />
        If it takes two strides to turn around at a landing, return the number of strides to get to the top of the staircase. You do not need to turn at the top of the staircase.
    </div>
    <br />
    @Html.ActionLink("Exercise 2 - Safest place in the galaxy", "Exercise2")
    <div>
        While en route to the 295th annual Galactic Music Awards on Bandoo, you find yourself unceremoniously yanked out of hyperspace and, according to your sensors, surrounded by N space bombs.  Apparently caught in a trap laid out by some dastardly and unknown enemy, and unable to return to hyperspace, you must find the safest place in the vicinity to weather the detonation of all the space bombs.  Your unseen opponent has constructed a cube-shaped space anomaly that you are unable to leave, so your options are limited to points within that cube.<br />
        You must find the point with the maximum distance to the nearest bomb, which your captain's intuition tells you will be the safest point.
    </div>
    <br />
    @Html.ActionLink("Exercise 3 - Adding this, adding that", "Exercise3")
    <div>
        The algorithm should be non destructive to the inputs.
        The algorithm should be able to handle large input lengths, of a couple of thousand values, but the input will never be large enough to cause a stack overflow.
    </div>
</div>
